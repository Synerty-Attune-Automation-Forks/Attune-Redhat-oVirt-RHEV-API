export PATH=~/ks_ovirt_py_venv/bin:$PATH
python3 <<"EOF"
import logging
import time
import sys
import ovirtsdk4 as sdk
import ovirtsdk4.types as types
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")
# This example will connect to the server and create a new virtual machine:
# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")
# Find the service that manages VMs:
logger.info("Getting system_service")
system_service = connection.system_service()
logger.info("Getting vms_service")
vms_service = system_service.vms_service()
# Find the VM:
logger.info("Searchig for VM 'name={kickstartedNode.fqn}'")
vm = vms_service.list(search='name={kickstartedNode.fqn}')[0]
# In order to specify the network that the new interface will be
# connected to we need to specify the identifier of the virtual network
# interface profile, so we need to find it. We can have duplicate names
# for vnic profiles in different clusters, so we must also find first the
# network by datacenter and cluster:
logger.info("Getting Cluster Service")
cluster = system_service.clusters_service().cluster_service(vm.cluster.id).get()
logger.info("Getting Data Centers Service")
dcs_service = connection.system_service().data_centers_service()
logger.info("Finding Data Center n.name == '{ovirtDatacenterName}'")
dc = next(
    (n for n in dcs_service.list(search='Clusters.name=%s' % cluster.name)
     if n.name == '{ovirtDatacenterName}'),
    None
)
if not dc:
    logger.error("Failed to find data center")
    exit(1)
logger.info("Getting Networks Service")
networks_service = dcs_service.service(dc.id).networks_service()
logger.info("Finding Network n.name == '{ovirtNetworkName}'")
network = next(
    (n for n in networks_service.list()
     if n.name == '{ovirtNetworkName}'),
    None
)
if not network:
    logger.error("Failed to find network")
    exit(1)
logger.info("Getting Profiles Service")
profiles_service = connection.system_service().vnic_profiles_service()
logger.info("Finding Profile profile.name == '{ovirtNetworkName}'")
profiles = [
    p for p in profiles_service.list() 
    if p.name == '{ovirtNetworkName}' and p.network.id == network.id
]
if profiles and len(profiles) != 1:
    logger.error("Failed to find exactly one network profile, found %s", 
        len(profiles))
    exit(1)
    
profile = profiles[0]
    
# Locate the service that manages the network interface cards of the
# virtual machine:
logger.info("Getting NICs Service")
nics_service = vms_service.vm_service(vm.id).nics_service()
# Use the "add" method of the network interface cards service to add the
# new network interface card:
logger.info("Adding NIC name='vnet0'")
nics_service.add(
    types.Nic(
        name='vnet0',
        description='{kickstartedNode.fqn}-vnet0',
        interface=types.NicInterface.{oVirtNicInterface},
        vnic_profile=types.VnicProfile(
            id=profile.id,
        ),
    ),
)
# Close the connection to the server:
connection.close()
EOF