export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"
import logging
import time
import sys

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")


connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

logger.info("Searchig for VM 'name={kickstartedNode.fqn}'")
vm = vms_service.list(search='name={kickstartedNode.fqn}')[0]
logger.info("Found VM 'name={kickstartedNode.fqn}'")

logger.info("Getting the disk service")
disk_attachments_service = vms_service.vm_service(vm.id).disk_attachments_service()

# Get a list of existing names
existingDiskNames = set([
    connection.follow_link(attachment.disk).name
    for attachment in disk_attachments_service.list()
])

nodeFqdn='{kickstartedNode.fqn}'
start = len(existingDiskNames)
i=0
while "%s-disk%s" % (nodeFqdn, i) in existingDiskNames:
    i = i + 1

diskName="%s-disk%s" % (nodeFqdn, i)

logger.info("Attaching the new disk")
disk_attachment = disk_attachments_service.add(
    types.DiskAttachment(
        disk=types.Disk(
            name=diskName,
            description=diskName,
            format=types.DiskFormat.COW,
            provisioned_size={newDiskSizeGb} * 2**30,
            storage_domains=[
                types.StorageDomain(
                    name='{ovirtDiskStorageName}',
                ),
            ],
        ),
        interface=types.DiskInterface.{ovirtDiskInterface},
        bootable=False,
        active=True,
    ),
)

logger.info("Getting the disks service for the new disk")
disks_service = connection.system_service().disks_service()

logger.info("Getting the disk service for the new disk")
disk_service = disks_service.disk_service(disk_attachment.disk.id)

logger.info("Starting to wait for disk to become online")
while True:
    logger.info("Wait for disk to become online")
    time.sleep(5)
    disk = disk_service.get()
    if disk.status == types.DiskStatus.OK:
        break

logger.info("Starting disk to appear")
while True:
    logger.info("Getting disk attatchment for %s", diskName)
    disk_attachments = disk_attachments_service.list(search='name=%s' % diskName)
    if len(disk_attachments):
        break

    logger.info("Waiting for disk to become online")
    time.sleep(5)

logger.info("Waiting for attachment status")
while True:
    logger.info("Getting disk attatchment for %s", diskName)
    disk = connection.follow_link(disk_attachment.disk)
    
    print(disk.status)
    if disk.status == types.DiskStatus.OK:
        break

    logger.info("Waiting for disk to attatch")
    time.sleep(5)

logger.info("Disk is online and attatched")

# Close the connection to the server:
connection.close()


EOF
